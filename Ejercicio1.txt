UT3_PD7

Operación Union:

Dados dos conjuntos por parametros, recorremos los dos conjuntos, y agregamos todos los elementos de los dos conjuntos a un tercer
conjunto, que es el conjunto que se devolverá al finalizar el algoritmo.

Pre condiciones:

Ninguno de los dos conjuntos debe estar vació

Post Condiciones:

El conjunto devuelto no puede tener menos elementos que la cantidad de elementos de cada conjunto.


Pseudocódigo:

obtenerUnion(Conjunto conjunto1, Conjunto conjunto2)

COM
	conjuntoFinal = Conjunto() O(1)

	Mientras conjunto1.elemento <> nulo hacer O(n)
          si elemento NoEstaEnConjunto(conjuntoFinal, conjunto1.elemento) O(n)
             conjuntoFinal.agregar(conjunto1.elemento) O(1)
          fin Si
	  conjunto1 = conjunto1.siguiente O(1)
       fin Mientras
        
        Mientras conjunto2.elemento <> nulo hacer O(n)
	  si elemento NoEstaEnConjunto(conjuntoFinal, conjunto2.elemento) O(n)
	  conjuntoFinal.agregar(conjunto2.elemento) O(1)
          fin Si
          conjunto2 = conjunto2.siguiente O(1)
       fin Mientras
FIN

Tiempo de ejecución = O(n)

Operación intersección:

Lenguaje Natural:

Iterar sobre los dos conjuntos, verificar los elementos que se encuentran en el conjunto1 y el conjunto2 a la vez

verificar que dentro de esos elementos no existan duplicados.

agregar esos elementos a un nuevo conjunto y devolver ese conjunto.


Pre Condiciones:

Los conjuntos no deben tener exactamente los mismos elementos

Ninguno de los dos conjuntos debe estar vacío

Post Condiciones:

El conjunto devuelto no debe tener duplicados.

El conjunto devuelto no debe tener más cantidad de elementos que la cantidad de elementos de cada conjunto

Pseudocodigo:

obtenerIntersección(Conjunto conjunto1, Conjunto conjunto2)

COM
   conjuntoFinal = Conjunto() O(1)
  Mientras conjunto1.elemento <> nulo hacer O(n)
    si (elementoEstaEnConjunto(conjunto1.elemento, conjunto2)) O(n)
       si (elementoNoEstaEnConjunto(conjuntoFinal, conjunto1.elemento)) O(n)
	  conjuntoFinal.agregar(conjunto1.elemento) O(1)
       fin Si
    fin Si
    conjunto1 = conjunto1.siguiente O(1)
  fin Mientras

Mientras conjunto2.elemento <> nulo hacer O(n)
   si(elementoEstaEnConjunto(conjunto2.elemento, conjunto1) O(n)
    si (elementoNoEstaEnConjunto(conjuntoFinal, conjunto2.elemento)) O(n)
       conjuntoFinal.agregar(conjunto2.elemento) O(1)
    fin Si
   fin Si
   conjunto2 = conjunto2.siguiente O(1)
fin Mientras

FIN

Tiempo de Ejecución = O(n)

Casos de prueba:


conjunto1 = {1,2,3,5}

conjunto2 = {9,10,11,30}

Union:

conjuntoFinal = {1,2,3,5,9,10,11,30}



Casos de prueba:

conjunto1 = {1,2,3,5}

conjunto2 = {1,3,7,9}


Intersección:

conjuntoFinal = {1,3}

        




        





